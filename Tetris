using System;
using System.Threading;

class Program
{
    static void Main()
    {
        Game game = new Game();
        game.Start();
    }
}

class Game
{
    private const int Width = 10;
    private const int Height = 20;
    private int[,] field = new int[Height, Width];
    private Tetromino currentTetromino;
    private int currentX, currentY;
    private Random random = new Random();
    private bool isGameOver = false;

    public void Start()
    {
        while (!isGameOver)
        {
            NewTetromino();
            while (!isGameOver)
            {
                DrawField();
                Input();
                Update();
                Thread.Sleep(500);
            }
        }
        Console.WriteLine("Game Over! Press any key to restart.");
        Console.ReadKey();
        Console.Clear();
        Start();
    }

    private void NewTetromino()
    {
        currentTetromino = Tetromino.GetRandomTetromino();
        currentX = Width / 2 - 1;
        currentY = 0;

        if (!CanMove(currentTetromino, currentX, currentY))
        {
            isGameOver = true;
        }
    }

    private void DrawField()
    {
        Console.Clear();
        for (int y = 0; y < Height; y++)
        {
            for (int x = 0; x < Width; x++)
            {
                if (field[y, x] == 1)
                    Console.Write("█");
                else if (IsTetrominoBlock(x, y))
                    Console.Write("■");
                else
                    Console.Write(" ");
            }
            Console.WriteLine();
        }
    }

    private bool IsTetrominoBlock(int x, int y)
    {
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                if (currentTetromino.Shape[i, j] == 1)
                {
                    if (currentX + j == x && currentY + i == y)
                        return true;
                }
            }
        }
        return false;
    }

    private void Input()
    {
        if (Console.KeyAvailable)
        {
            ConsoleKeyInfo key = Console.ReadKey(true);
            switch (key.Key)
            {
                case ConsoleKey.LeftArrow:
                    if (CanMove(currentTetromino, currentX - 1, currentY))
                        currentX--;
                    break;
                case ConsoleKey.RightArrow:
                    if (CanMove(currentTetromino, currentX + 1, currentY))
                        currentX++;
                    break;
                case ConsoleKey.DownArrow:
                    if (CanMove(currentTetromino, currentX, currentY + 1))
                        currentY++;
                    break;
                case ConsoleKey.UpArrow:
                    Tetromino rotated = currentTetromino.Rotate();
                    if (CanMove(rotated, currentX, currentY))
                        currentTetromino = rotated;
                    break;
            }
        }
    }

    private void Update()
    {
        if (CanMove(currentTetromino, currentX, currentY + 1))
        {
            currentY++;
        }
        else
        {
            PlaceTetromino();
            RemoveFullLines();
        }
    }

    private bool CanMove(Tetromino tetromino, int newX, int newY)
    {
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                if (tetromino.Shape[i, j] == 1)
                {
                    int x = newX + j;
                    int y = newY + i;

                    if (x < 0 || x >= Width || y >= Height || (y >= 0 && field[y, x] == 1))
                        return false;
                }
            }
        }
        return true;
    }

    private void PlaceTetromino()
    {
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                if (currentTetromino.Shape[i, j] == 1)
                {
                    field[currentY + i, currentX + j] = 1;
                }
            }
        }
    }

    private void RemoveFullLines()
    {
        for (int y = Height - 1; y >= 0; y--)
        {
            bool isFull = true;
            for (int x = 0; x < Width; x++)
            {
                if (field[y, x] == 0)
                {
                    isFull = false;
                    break;
                }
            }

            if (isFull)
            {
                for (int j = y; j > 0; j--)
                {
                    for (int x = 0; x < Width; x++)
                    {
                        field[j, x] = field[j - 1, x];
                    }
                }
            }
        }
    }
}

class Tetromino
{
    public int[,] Shape { get; private set; }

    private Tetromino(int[,] shape)
    {
        Shape = shape;
    }

    public Tetromino Rotate()
    {
        int[,] rotated = new int[4, 4];
        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                rotated[j, 3 - i] = Shape[i, j];
            }
        }
        return new Tetromino(rotated);
    }

    public static Tetromino GetRandomTetromino()
    {
        Random random = new Random();
        int type = random.Next(0, 7);
        switch (type)
        {
            case 0: return new Tetromino(new int[,] { { 1, 1, 1, 1 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 }, { 0, 0, 0, 0 } }); // I
            case 1: return new Tetromino(new int[,] { { 1, 1, 1 }, { 0, 1, 0 }, { 0, 0, 0 } }); // T
            case 2: return new Tetromino(new int[,] { { 1, 1, 0 }, { 0, 1, 1 }, { 0, 0, 0 } }); // Z
            case 3: return new Tetromino(new int[,] { { 0, 1, 1 }, { 1, 1, 0 }, { 0, 0, 0 } }); // S
            case 4: return new Tetromino(new int[,] { { 1, 1, 1 }, { 1, 0, 0 }, { 0, 0, 0 } }); // L
            case 5: return new Tetromino(new int[,] { { 1, 1, 1 }, { 0, 0, 1 }, { 0, 0, 0 } }); // J
            case 6: return new Tetromino(new int[,] { { 1, 1 }, { 1, 1 } }); // O
            default: return null;
        }
    }
}
